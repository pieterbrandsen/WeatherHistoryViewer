@page "/weatherOfDate"
@using WeatherHistoryViewer.Services.Helpers
@using WeatherHistoryViewer.Core.Models.Weather
@using WeatherHistoryViewer.Services.Handlers
@using System.ComponentModel.DataAnnotations

<EditForm Model="@formResponse" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>
    <ValidationSummary/>
    <p>
        <label>
            Location:
            <InputText id="location" @bind-Value="formResponse.Location"/>
        </label>
    </p>
    <p>
        <label>
            Date:
            <InputText id="date" @bind-Value="formResponse.Date"/>
        </label>
    </p>
    <button class="button" type="submit">Reload</button>
</EditForm>

@if (weather == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else if (weather.Count == 0)
{
    <br/>
    <p>
        <em>Nothing found! Please try again.</em>
    </p>
    <br/>
    <h4>Troubleshooting:</h4>
    <p>
        <b>Is your location one of the following?</b>
    </p>
    foreach (var location in new LocationHandler().GetAllLocationNames())
    {
        <p>
            <em>@location</em>
        </p>
    }
    <p>
        <b>Is your Date something like this</b>
    </p>
    <p>
        <em>MONTH-DAY</em>
    </p>
    <p>
        <em>2-28</em>
    </p>
    <p>
        <em>12-15</em>
    </p>
}
else
{
    <h1>The weather of date @weather.First().Date.Split("-")[1]-@weather.First().Date.Split("-")[2] in @weather.First().Location.Country, @weather.First().Location.Name</h1>
    <br/>
    <table class="table table-bordered">
        <thead>
        <tr>
            <th>Year</th>
            <th>Avg temp</th>
            <th>Min temp</th>
            <th>Max temp</th>
            <th>Sun hours</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var day in weather)
        {
            <tr>
                <th>@day.Date.Split("-")[0]</th>
                <td>@day.AvgTemp</td>
                <td>@day.MinTemp</td>
                <td>@day.MaxTemp</td>
                <td>@day.SunHour</td>
            </tr>
        }
        </tbody>
    </table>
}


@code {
    private readonly WeatherHelper weatherHelper = new();

    private class Form
    {
        [Required]
        public string Location { get; set; }

        [Required]
        public string Date { get; set; }
    }

    private readonly Form formResponse = new();

    private List<HistoricalWeather> weather;

    protected override void OnInitialized()
    {
        weather = weatherHelper.GetWeatherOfDateInThePastYears("Amsterdam", DateTime.Now.AddDays(-1).ToString("MM/dd"));
    }

    void HandleValidSubmit()
    {
        weather = weatherHelper.GetWeatherOfDateInThePastYears(formResponse.Location, formResponse.Date);
    }
}