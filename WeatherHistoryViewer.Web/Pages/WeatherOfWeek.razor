@page "/weatherOfWeek"
@using WeatherHistoryViewer.Services.Helper
@using WeatherHistoryViewer.Core.Models.Weather
@using WeatherHistoryViewer.Services.Handlers
@using System.ComponentModel.DataAnnotations

@*<style>
    table {
        border-collapse: collapse;
    }
tr { display: block; float: left; }
th, td { display: block; border: 1px solid black; }
</style>*@

<EditForm Model="@_formResponse" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <p>
        <label>
            Location:
            <InputText id="location" @bind-Value="_formResponse.Location" />
        </label>
    </p>
    <p>
        <label>
            Date in week:
            <InputText id="date" @bind-Value="_formResponse.Date" />
        </label>
    </p>
    <button class="button" type="submit">Submit</button>
</EditForm>

@if (_weatherOfWeeks == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else if (_weatherOfWeeks.Count == 0)
    {
        <br />
        <p>
            <em>Nothing found! Please try again.</em>
        </p>
        <br />
        <h4>Troubleshooting:</h4>
        <p>
            <b>Is your location one of the following?</b>
        </p>
        foreach (var location in new LocationHandler().GetAllLocationNames())
        {
            <p>
                <em>@location</em>
            </p>
        }
        <p>
            <b>Is your Date something like this</b>
        </p>
        <p>
            <em>MONTH-DAY</em>
        </p>
        <p>
            <em>2-28</em>
        </p>
        <p>
            <em>12-15</em>
        </p>
    }
    else
    {
        <h1>The weather of @_formResponse.Date in @_weatherOfWeeks.First().First().Location.Country, @_weatherOfWeeks.First().First().Location.Name</h1>
        <br />
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Date</th>
                    <th>Avg temp</th>
                    <th>Min temp</th>
                    <th>Max temp</th>
                    <th>Sun hours</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in _weatherOfWeeks.FindAll(wl=>wl.Count > 0))
                {
                    <tr>
                        <th>Year</th>
                        <th>Date</th>
                        <th>Avg temp</th>
                        <th>Min temp</th>
                        <th>Max temp</th>
                        <th>Sun hours</th>
                    </tr>
                    @foreach (var day in _weatherOfWeeks.Find(w=>w.Count > 3))
                    {

                        <tr>
                            <th>@day.Date.Split("-")[1]/@day.Date.Split("-")[2]</th>
                            <th>@day.Date.Split("-")[0]</th>
                            <th>@day.AvgTemp</th>
                            <th>@day.MinTemp</th>
                            <th>@day.MaxTemp</th>
                            <th>@day.SunHour</th>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }


@code {
    private readonly WeatherHelper _weatherHelper = new();

    private class Form
    {
        [Required]
        public string Location { get; set; }

        [Required]
        public string Date { get; set; }
    }

    private readonly Form _formResponse = new();

    private List<List<HistoricalWeather>> _weatherOfWeeks;

    protected override void OnInitialized()
    {
        _weatherOfWeeks = _weatherHelper.GetWeatherWeekOfDateInThePastYears("Amsterdam", DateTime.Now.AddDays(-1).ToString("MM/dd"));
    }

    void HandleValidSubmit()
    {
        _weatherOfWeeks = _weatherHelper.GetWeatherWeekOfDateInThePastYears(_formResponse.Location, _formResponse.Date);
    }

}