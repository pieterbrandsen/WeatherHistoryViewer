@page "/weatherOfWeek"
@using WeatherHistoryViewer.Services.Helpers
@using WeatherHistoryViewer.Core.Models.Weather
@using WeatherHistoryViewer.Core.Models
@using WeatherHistoryViewer.Services.Handlers
@using WeatherHistoryViewer.Core.ViewModels
@using System.Linq
@inject HttpClient Http

@if (_weatherOfWeek == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="form-style">
        <div class="form-style-heading">Load weather data</div>
        <p>
            Currently loaded data for date @_formResponse.Date.ToString("MM/dd") in @_weatherOfWeek.First().First().Location.Name
        </p>
        <EditForm Model="@_formResponse" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <label for="location"><span>Location <span class="required">*</span></span><input type="text" class="input-field" @bind-value="@_formResponse.Location" list="locationSearch" /></label>
            <datalist id="locationSearch">
                @foreach (var name in _locationNames)
                {
                    <option>@name</option>
                }
            </datalist>
            <label for="date"><span>Date <span class="required">*</span></span><InputDate @bind-Value="_formResponse.Date"></InputDate></label>

            <label><span> </span><input type="submit" value="Load" /></label>
        </EditForm>
    </div>

    @foreach (var prop in Enum.GetValues(typeof(DisplayedPropertys)))
    {
        @switch (prop)
        {
            case DisplayedPropertys.AvgTemp:
                <LegendaComponent WeatherLegenda="@_weatherLegenda" OverrideNameOfLegendaValue="AvgTemp"></LegendaComponent>
                break;
            case DisplayedPropertys.MaxTemp:
                <LegendaComponent WeatherLegenda="@_weatherLegenda" OverrideNameOfLegendaValue="MaxTemp"></LegendaComponent>
                break;
            case DisplayedPropertys.MinTemp:
                <LegendaComponent WeatherLegenda="@_weatherLegenda" OverrideNameOfLegendaValue="MinTemp"></LegendaComponent>
                break;
            case DisplayedPropertys.SunHour:
                <LegendaComponent WeatherLegenda="@_weatherLegenda" OverrideNameOfLegendaValue="SunHour"></LegendaComponent>
                break;
            default:
                break;
        }
        <table class="table table-bordered" style="width: auto;">
            <tr>
                <th>Year</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Satuday</th>
                <th>Sunday</th>
                <th>Average</th>
            </tr>
            @for (int i = 0; i < _weatherOfWeek.Count; i++)
            {
                var week = _weatherOfWeek[i];
                <tr>
                    <th>@week.First().Date.Split("-")[0]</th>
                    @switch (prop)
                    {
                        case DisplayedPropertys.AvgTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.AvgTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                <td class="@_averageHistoricalWeatherEachWeek[i].CssBackgroundClass.AvgTemp">@_averageHistoricalWeatherEachWeek[i].AvgTemp</td>
                            }
                            break;
                        case DisplayedPropertys.MaxTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.MaxTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                <td class="@_averageHistoricalWeatherEachWeek[i].CssBackgroundClass.MaxTemp">@_averageHistoricalWeatherEachWeek[i].MaxTemp</td>
                            }
                            break;
                        case DisplayedPropertys.MinTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.MinTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                <td class="@_averageHistoricalWeatherEachWeek[i].CssBackgroundClass.MinTemp">@_averageHistoricalWeatherEachWeek[i].MinTemp</td>
                            }
                            break;
                        case DisplayedPropertys.SunHour:
                            @foreach (var day in week)
                            {
                                <td>@day.SunHour</td>
                            }
                            @if (week.Count == 7)
                            {
                                <td class="@_averageHistoricalWeatherEachWeek[i].CssBackgroundClass.SunHour">@_averageHistoricalWeatherEachWeek[i].SunHour</td>
                            }
                            break;
                        default:
                            break;
                    }
                </tr>
            }
        </table>
        <br />
    }
}


@code {
    private readonly WeatherHelper _weatherHelper = new();
    private readonly DateHelper _dateHelper = new();

    private enum DisplayedPropertys
    {
        AvgTemp,
        MaxTemp,
        MinTemp,
        SunHour
    }

    private readonly FormResponse _formResponse = new();

    private List<List<HistoricalWeather>> _weatherOfWeek;
    private WeatherLegenda _weatherLegenda;
    private List<HistoricalWeather> _averageHistoricalWeatherEachWeek;
    private List<string> _locationNames;

    protected override async Task OnInitializedAsync()
    {
        _formResponse.Date = DateTime.Today;

        _locationNames = await Http.GetFromJsonAsync<List<string>>("/api/location/getLocationNames");
        var weatherOfWeekViewModel = await Http.GetFromJsonAsync<WeatherOfWeekViewModel>($"/api/weatherOf/week");
        _weatherLegenda = weatherOfWeekViewModel.WeatherLegenda;
        _weatherOfWeek = weatherOfWeekViewModel.HistoricalWeathers;
        _averageHistoricalWeatherEachWeek = weatherOfWeekViewModel.AverageHistoricalWeatherEachWeek;
    }

    async void HandleValidSubmit()
    {
        var weatherOfWeekViewModel = await Http.GetFromJsonAsync<WeatherOfWeekViewModel>($"/api/weatherOf/week?location={_formResponse.Location}&date={_formResponse.Date.ToString("yyyy/MM/dd")}");
        _weatherLegenda = weatherOfWeekViewModel.WeatherLegenda;
        _weatherOfWeek = weatherOfWeekViewModel.HistoricalWeathers;
        _averageHistoricalWeatherEachWeek = weatherOfWeekViewModel.AverageHistoricalWeatherEachWeek;
    }
}