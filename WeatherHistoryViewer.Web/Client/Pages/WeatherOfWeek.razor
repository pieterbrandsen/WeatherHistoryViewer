@page "/weatherOfWeek"
@using WeatherHistoryViewer.Services.Helpers
@using WeatherHistoryViewer.Core.Models.Weather
@using WeatherHistoryViewer.Core.Models
@using WeatherHistoryViewer.Services.Handlers
@using System.Linq
@inject HttpClient Http

@if (_weatherOfWeeks == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
<div class="form-style">
    <div class="form-style-heading">Load weather data</div>
    <p>
        Currently loaded data for date @_formResponse.Date.ToString("MM/dd") in @_formResponse.Location
    </p>
    <EditForm Model="@_formResponse" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <label for="location"><span>Location <span class="required">*</span></span><input type="text" class="input-field" @bind-value="@_formResponse.Location" list="locationSearch" /></label>
        <datalist id="locationSearch">
            @foreach (var name in _locationNames)
            {
            <option>@name</option>
            }
        </datalist>
        <label for="date"><span>Date <span class="required">*</span></span><InputDate @bind-Value="_formResponse.Date"></InputDate></label>

        <label><span> </span><input type="submit" value="Load" /></label>
    </EditForm>
</div>

    @foreach (var prop in Enum.GetValues(typeof(DisplayedPropertys)))
    {
        @switch (prop)
        {
            case DisplayedPropertys.AvgTemp:
                <h2>Average temperature</h2>
                break;
            case DisplayedPropertys.MaxTemp:
                <h2>Maximum temperature</h2>
                break;
            case DisplayedPropertys.MinTemp:
                <h2>Minimum temperature</h2>
                break;
            case DisplayedPropertys.SunHours:
                <h2>Sun hours</h2>
                break;
            default:
                break;
        }
        <table class="table table-bordered" style="width: auto;">
            <tr>
                <th>Year</th>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Satuday</th>
                <th>Sunday</th>
                <th>Average</th>
            </tr>
            @for (int i = 0; i < _weatherOfWeeks.Count; i++)
            {
                var week = _weatherOfWeeks[i];
                <tr>
                    <th>@week.First().Date.Split("-")[0]</th>
                    @switch (prop)
                    {
                        case DisplayedPropertys.AvgTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.AvgTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                var backgroundColor = $"hsla({Math.Round((avgTemps[i] / avgTempMax - 1) * -1 * 240,0)},100%,50%,0.5)";
                                <td style="background-color:@backgroundColor">@avgTemps[i]</td>
                            }
                            break;
                        case DisplayedPropertys.MaxTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.MaxTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                var backgroundColor = $"hsla({Math.Round((maxTemps[i] / maxTempMax - 1) * -1 * 240,0)},100%,50%,0.5)";
                                <td style="background-color:@backgroundColor">@maxTemps[i]</td>
                            }
                            break;
                        case DisplayedPropertys.MinTemp:
                            @foreach (var day in week)
                            {
                                <td>@day.MinTemp</td>
                            }
                            @if (week.Count == 7)
                            {
                                var backgroundColor = $"hsla({Math.Round((minTemps[i] / minTempMax - 1) * -1 * 240,0)},100%,50%,0.5)";
                                <td style="background-color:@backgroundColor">@minTemps[i]</td>
                            }
                            break;
                        case DisplayedPropertys.SunHours:
                            @foreach (var day in week)
                            {
                                <td>@day.SunHour</td>
                            }
                            @if (week.Count == 7)
                            {
                                var backgroundColor = $"hsla({Math.Round((sunHours[i] / sunHoursMax - 1) * -1 * 240,0)},100%,50%,0.5)";
                                <td style="background-color:@backgroundColor">@sunHours[i]</td>
                            }
                            break;
                        default:
                            break;
                    }
                </tr>
            }
        </table>
        <br />
    }
}


@code {
    private readonly WeatherHelper _weatherHelper = new();
    private readonly DateHelper _dateHelper = new();

    private enum DisplayedPropertys
    {
        AvgTemp,
        MaxTemp,
        MinTemp,
        SunHours
    }

    private readonly FormResponse _formResponse = new();

    private List<List<HistoricalWeather>> _weatherOfWeeks;
    private List<string> _locationNames;

    private List<double> avgTemps = new();
    private List<double> maxTemps = new();
    private List<double> minTemps = new();
    private List<double> sunHours = new();

    private double avgTempMax = double.NaN;
    private double maxTempMax = double.NaN;
    private double minTempMax = double.NaN;
    private double sunHoursMax = double.NaN;

    protected override async Task OnInitializedAsync()
    {
        _formResponse.Location = "Amsterdam";
        _formResponse.Date = DateTime.Today;

        _locationNames = await Http.GetFromJsonAsync<List<string>>("/api/location/getLocationNames");
        _weatherOfWeeks = await Http.GetFromJsonAsync<List<List<HistoricalWeather>>>("/api/weatherOf/weeks");

        _weatherOfWeeks.ForEach(w =>
        {
            avgTemps.Add(Math.Round(w.Select(w => w.AvgTemp).Average(), 2));
            maxTemps.Add(Math.Round(w.Select(w => w.MaxTemp).Average(), 2));
            minTemps.Add(Math.Round(w.Select(w => w.MinTemp).Average(), 2));
            sunHours.Add(Math.Round(w.Select(w => w.SunHour).Average(), 2));
        });
        avgTempMax = avgTemps.Max();
        maxTempMax = maxTemps.Max();
        minTempMax = minTemps.Max();
        sunHoursMax = sunHours.Max();
    }

    async void HandleValidSubmit()
    {
        _weatherOfWeeks = await Http.GetFromJsonAsync<List<List<HistoricalWeather>>>($"/api/weatherOf/weeks?location={_formResponse.Location}&date={_formResponse.Date.ToString("yyyy/MM/dd")}");
    }
}