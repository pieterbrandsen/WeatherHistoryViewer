@page "/addWeatherData"
@using WeatherHistoryViewer.Core.Models
@inject HttpClient Http
@if (_locationNames == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <div class="form-style">
        <div class="form-style-heading">Add weather data</div>
        @if (_formResponse.Location != null)
        {
            <p>
                <b>Currently downloading data for @_formResponse.Location </b>
            </p>
        }
        <EditForm Model="@_formResponse" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>
            <label for="location">
                <span>Location <span class="required">*</span></span><input type="text" class="input-field" @bind-value="@_formResponse.Location" list="locationSearch"/>
            </label>
            <datalist id="locationSearch">
                @foreach (var name in _locationNames)
                {
                    <option>@name</option>
                }
            </datalist>
            <label for="date">
                <span>Oldest date <span class="required">*</span></span><InputDate @bind-Value="_formResponse.OldestDate"></InputDate>
            </label>
            <label for="date">
                <span>Newest date <span class="required">*</span></span><InputDate @bind-Value="_formResponse.NewestDate"></InputDate>
            </label>
            <label>
                <span> </span><input type="submit" value="Add"/>
            </label>
        </EditForm>
    </div>
}

@code {
    private readonly AddWeatherDataForm _formResponse = new();

    private List<string> _locationNames;

    protected override async Task OnInitializedAsync()
    {
        _locationNames = await Http.GetFromJsonAsync<List<string>>("/api/location/getLocationNames");
        _formResponse.NewestDate = DateTime.Today;
        _formResponse.OldestDate = DateTime.Today.AddDays(-365);
    }

    void HandleValidSubmit()
    {
        Http.PostAsJsonAsync("/api/addWeatherData", _formResponse);
    }

}